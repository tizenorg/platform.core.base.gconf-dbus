<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gconf-gconf-engine">
<refmeta>
<refentrytitle role="top_of_page">GConfEngine</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GCONF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GConfEngine</refname>
<refpurpose>
a GConf "database"</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



                    <link linkend="GConfEngine">GConfEngine</link>;
<link linkend="GConfEngine">GConfEngine</link>*        <link linkend="gconf-engine-get-default">gconf_engine_get_default</link>            (void);
<link linkend="GConfEngine">GConfEngine</link>*        <link linkend="gconf-engine-get-for-address">gconf_engine_get_for_address</link>        (const <link linkend="gchar">gchar</link> *address,
                                                         <link linkend="GError">GError</link> **err);
<link linkend="GConfEngine">GConfEngine</link>*        <link linkend="gconf-engine-get-for-addresses">gconf_engine_get_for_addresses</link>      (<link linkend="GSList">GSList</link> *addresses,
                                                         <link linkend="GError">GError</link> **err);
<link linkend="void">void</link>                <link linkend="gconf-engine-unref">gconf_engine_unref</link>                  (<link linkend="GConfEngine">GConfEngine</link> *conf);
<link linkend="void">void</link>                <link linkend="gconf-engine-ref">gconf_engine_ref</link>                    (<link linkend="GConfEngine">GConfEngine</link> *conf);
<link linkend="GConfEngine">GConfEngine</link>*        <link linkend="gconf-engine-get-local">gconf_engine_get_local</link>              (const <link linkend="char">char</link> *address,
                                                         <link linkend="GError">GError</link> **err);
<link linkend="GConfEngine">GConfEngine</link>*        <link linkend="gconf-engine-get-local-for-addresses">gconf_engine_get_local_for_addresses</link>
                                                        (<link linkend="GSList">GSList</link> *addresses,
                                                         <link linkend="GError">GError</link> **err);
<link linkend="void">void</link>                <link linkend="gconf-engine-set-user-data">gconf_engine_set_user_data</link>          (<link linkend="GConfEngine">GConfEngine</link> *engine,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);
<link linkend="gpointer">gpointer</link>            <link linkend="gconf-engine-get-user-data">gconf_engine_get_user_data</link>          (<link linkend="GConfEngine">GConfEngine</link> *engine);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A <link linkend="GConfEngine"><type>GConfEngine</type></link> represents a connection to the GConf database. The
default <link linkend="GConfEngine"><type>GConfEngine</type></link>, returned from <link linkend="gconf-engine-get-default"><function>gconf_engine_get_default()</function></link>, represents the
user's normal configuration source search path. Configuration-related
utilities, such as a configuration editor tool, might wish to access a
particular configuration source directly; they can obtain a
non-default <link linkend="GConfEngine"><type>GConfEngine</type></link> with <link linkend="gconf-engine-get-for-address"><function>gconf_engine_get_for_address()</function></link>.
</para>

<para>
Once you have a <link linkend="GConfEngine"><type>GConfEngine</type></link>, you can query and manipulate
configuration values.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GConfEngine" role="struct"/>GConfEngine</title>
<indexterm><primary>GConfEngine</primary></indexterm><programlisting>typedef struct _GConfEngine GConfEngine;</programlisting>
<para>
An opaque data type representing one or more configuration sources.
</para></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-default" role="function"/>gconf_engine_get_default ()</title>
<indexterm><primary>gconf_engine_get_default</primary></indexterm><programlisting><link linkend="GConfEngine">GConfEngine</link>*        gconf_engine_get_default            (void);</programlisting>
<para>
Returns the default <link linkend="GConfEngine"><type>GConfEngine</type></link>. All clients should use this, unless 
they are special configuration-related tools. The caller of this
function assumes one reference count, and must call
<link linkend="gconf-engine-unref"><function>gconf_engine_unref()</function></link> at some point. It's fairly important to unref the
<link linkend="GConfEngine"><type>GConfEngine</type></link>, to cleanly close the connection to
<application>gconfd</application>. So if possible close the connection
before exiting your application. see ? <link linkend="printf"><function>printf()</function></link> <function><link linkend="printf"><function>printf()</function></link></function>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the default <link linkend="GConfEngine"><type>GConfEngine</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-for-address" role="function"/>gconf_engine_get_for_address ()</title>
<indexterm><primary>gconf_engine_get_for_address</primary></indexterm><programlisting><link linkend="GConfEngine">GConfEngine</link>*        gconf_engine_get_for_address        (const <link linkend="gchar">gchar</link> *address,
                                                         <link linkend="GError">GError</link> **err);</programlisting>
<para>
Obtains a special <link linkend="GConfEngine"><type>GConfEngine</type></link>; mostly useful for specialized
GConf-related tools. Normal clients shouldn't need to use it.
As with <link linkend="gconf-engine-get-default"><function>gconf_engine_get_default()</function></link>, the returned <link linkend="GConfEngine"><type>GConfEngine</type></link> should be
unreferenced by the caller of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>address</parameter>&nbsp;:</term>
<listitem><simpara>a configuration source address.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>the return location for an allocated <link linkend="GError"><type>GError</type></link>, or <symbol>NULL</symbol> to ignore errors.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-for-addresses" role="function" condition="since:2.4"/>gconf_engine_get_for_addresses ()</title>
<indexterm role="2.4"><primary>gconf_engine_get_for_addresses</primary></indexterm><programlisting><link linkend="GConfEngine">GConfEngine</link>*        gconf_engine_get_for_addresses      (<link linkend="GSList">GSList</link> *addresses,
                                                         <link linkend="GError">GError</link> **err);</programlisting>
<para>
Similar to <link linkend="gconf-engine-get-for-address"><function>gconf_engine_get_for_address()</function></link> , but takes a list of addresses 
instead of a single address.
</para><variablelist role="params">
<varlistentry><term><parameter>addresses</parameter>&nbsp;:</term>
<listitem><simpara>a list of configuration addresses.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>the return location for an allocated <link linkend="GError"><type>GError</type></link>, or <symbol>NULL</symbol> to ignore errors.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4


</para></refsect2>
<refsect2>
<title><anchor id="gconf-engine-unref" role="function"/>gconf_engine_unref ()</title>
<indexterm><primary>gconf_engine_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_engine_unref                  (<link linkend="GConfEngine">GConfEngine</link> *conf);</programlisting>
<para>
Decreases the reference count of a <link linkend="GConfEngine"><type>GConfEngine</type></link> by one; if the
reference count reaches 0, destroys the <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>conf</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-engine-ref" role="function"/>gconf_engine_ref ()</title>
<indexterm><primary>gconf_engine_ref</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_engine_ref                    (<link linkend="GConfEngine">GConfEngine</link> *conf);</programlisting>
<para>
Increases the reference count of a <link linkend="GConfEngine"><type>GConfEngine</type></link> by one.
</para><variablelist role="params">
<varlistentry><term><parameter>conf</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-local" role="function"/>gconf_engine_get_local ()</title>
<indexterm><primary>gconf_engine_get_local</primary></indexterm><programlisting><link linkend="GConfEngine">GConfEngine</link>*        gconf_engine_get_local              (const <link linkend="char">char</link> *address,
                                                         <link linkend="GError">GError</link> **err);</programlisting>
<para>
Obtain a local (non-process-transparent) <link linkend="GConfEngine"><type>GConfEngine</type></link>. Local engines
do not support notification, and can only access config databases
directly (they do not use the multiple sources in a path system
supported by nonlocal engines).
</para><variablelist role="params">
<varlistentry><term><parameter>address</parameter>&nbsp;:</term>
<listitem><simpara>address of local database.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>return location of an allocated <link linkend="GError"><type>GError</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-local-for-addresses" role="function" condition="since:2.8"/>gconf_engine_get_local_for_addresses ()</title>
<indexterm role="2.8"><primary>gconf_engine_get_local_for_addresses</primary></indexterm><programlisting><link linkend="GConfEngine">GConfEngine</link>*        gconf_engine_get_local_for_addresses
                                                        (<link linkend="GSList">GSList</link> *addresses,
                                                         <link linkend="GError">GError</link> **err);</programlisting>
<para>
Obtains a local <link linkend="GConfEngine"><type>GConfEngine</type></link> similar to <link linkend="gconf-engine-get-local"><function>gconf_engine_get_local()</function></link>.
Instead of taking the address of the local database, this function takes
the addresses of the sources and gets the <link linkend="GConfSources"><type>GConfSources</type></link> using <link linkend="gconf-sources-new-from-addresses"><function>gconf_sources_new_from_addresses()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>addresses</parameter>&nbsp;:</term>
<listitem><simpara>a list of addresses of <link linkend="GConfSources"><type>GConfSources</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>the return location for an allocated <link linkend="GError"><type>GError</type></link>, or <symbol>NULL</symbol> to ignore errors.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8


</para></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-user-data" role="function"/>gconf_engine_set_user_data ()</title>
<indexterm><primary>gconf_engine_set_user_data</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_engine_set_user_data          (<link linkend="GConfEngine">GConfEngine</link> *engine,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);</programlisting>
<para>
Sets the user_data and the destroy notification function fields of a <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="gpointer"><type>gpointer</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dnotify</parameter>&nbsp;:</term>
<listitem><simpara>a pointer to the function to be called during destroy.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-user-data" role="function"/>gconf_engine_get_user_data ()</title>
<indexterm><primary>gconf_engine_get_user_data</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            gconf_engine_get_user_data          (<link linkend="GConfEngine">GConfEngine</link> *engine);</programlisting>
<para>
Returns the user_data field of a <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfEngine"><type>GConfEngine</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a pointer to the user_data.


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
