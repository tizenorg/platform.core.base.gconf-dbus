<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gconf-gconf-schema">
<refmeta>
<refentrytitle role="top_of_page">GConfSchema</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GCONF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GConfSchema</refname>
<refpurpose>
A <link linkend="GConfSchema"><type>GConfSchema</type></link> describes a <link linkend="GConfEntry"><type>GConfEntry</type></link></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



                    <link linkend="GConfSchema">GConfSchema</link>;
<link linkend="GConfSchema">GConfSchema</link>*        <link linkend="gconf-schema-new">gconf_schema_new</link>                    (void);
<link linkend="void">void</link>                <link linkend="gconf-schema-free">gconf_schema_free</link>                   (<link linkend="GConfSchema">GConfSchema</link> *sc);
<link linkend="GConfSchema">GConfSchema</link>*        <link linkend="gconf-schema-copy">gconf_schema_copy</link>                   (const <link linkend="GConfSchema">GConfSchema</link> *sc);
<link linkend="GConfValueType">GConfValueType</link>      <link linkend="gconf-schema-get-type">gconf_schema_get_type</link>               (const <link linkend="GConfSchema">GConfSchema</link> *schema);
const <link linkend="char">char</link>*         <link linkend="gconf-schema-get-locale">gconf_schema_get_locale</link>             (const <link linkend="GConfSchema">GConfSchema</link> *schema);
const <link linkend="char">char</link>*         <link linkend="gconf-schema-get-short-desc">gconf_schema_get_short_desc</link>         (const <link linkend="GConfSchema">GConfSchema</link> *schema);
const <link linkend="char">char</link>*         <link linkend="gconf-schema-get-long-desc">gconf_schema_get_long_desc</link>          (const <link linkend="GConfSchema">GConfSchema</link> *schema);
const <link linkend="char">char</link>*         <link linkend="gconf-schema-get-owner">gconf_schema_get_owner</link>              (const <link linkend="GConfSchema">GConfSchema</link> *schema);
<link linkend="GConfValue">GConfValue</link>*         <link linkend="gconf-schema-get-default-value">gconf_schema_get_default_value</link>      (const <link linkend="GConfSchema">GConfSchema</link> *schema);
<link linkend="GConfValueType">GConfValueType</link>      <link linkend="gconf-schema-get-car-type">gconf_schema_get_car_type</link>           (const <link linkend="GConfSchema">GConfSchema</link> *schema);
<link linkend="GConfValueType">GConfValueType</link>      <link linkend="gconf-schema-get-cdr-type">gconf_schema_get_cdr_type</link>           (const <link linkend="GConfSchema">GConfSchema</link> *schema);
<link linkend="GConfValueType">GConfValueType</link>      <link linkend="gconf-schema-get-list-type">gconf_schema_get_list_type</link>          (const <link linkend="GConfSchema">GConfSchema</link> *schema);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-type">gconf_schema_set_type</link>               (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-locale">gconf_schema_set_locale</link>             (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *locale);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-short-desc">gconf_schema_set_short_desc</link>         (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *desc);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-long-desc">gconf_schema_set_long_desc</link>          (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *desc);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-owner">gconf_schema_set_owner</link>              (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *owner);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-default-value">gconf_schema_set_default_value</link>      (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="GConfValue">GConfValue</link> *val);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-default-value-nocopy">gconf_schema_set_default_value_nocopy</link>
                                                        (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValue">GConfValue</link> *val);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-car-type">gconf_schema_set_car_type</link>           (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-cdr-type">gconf_schema_set_cdr_type</link>           (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);
<link linkend="void">void</link>                <link linkend="gconf-schema-set-list-type">gconf_schema_set_list_type</link>          (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A "schema" describes a key-value pair in a GConf database.
It may include information such as default value and value
type, as well as documentation describing the pair, the
name of the application that created the pair, etc.
</para>
<para>
A <link linkend="GConfSchema"><type>GConfSchema</type></link> duplicates some of the information about the value it
describes, such as type information. In these cases, the type information
provided describes what the type of the value <emphasis>should
be</emphasis>, not what the type actually is.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GConfSchema" role="struct"/>GConfSchema</title>
<indexterm><primary>GConfSchema</primary></indexterm><programlisting>typedef struct _GConfSchema GConfSchema;</programlisting>
<para>
An opaque data type representing a description of a key-value pair.
</para></refsect2>
<refsect2>
<title><anchor id="gconf-schema-new" role="function"/>gconf_schema_new ()</title>
<indexterm><primary>gconf_schema_new</primary></indexterm><programlisting><link linkend="GConfSchema">GConfSchema</link>*        gconf_schema_new                    (void);</programlisting>
<para>
Creates a new <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>newly allocated <link linkend="GConfSchema"><type>GConfSchema</type></link>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-free" role="function"/>gconf_schema_free ()</title>
<indexterm><primary>gconf_schema_free</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_free                   (<link linkend="GConfSchema">GConfSchema</link> *sc);</programlisting>
<para>
Deallocates a <link linkend="GConfSchema"><type>GConfSchema</type></link>. Also frees any allocated memory
inside the <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link> to destroy.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-copy" role="function"/>gconf_schema_copy ()</title>
<indexterm><primary>gconf_schema_copy</primary></indexterm><programlisting><link linkend="GConfSchema">GConfSchema</link>*        gconf_schema_copy                   (const <link linkend="GConfSchema">GConfSchema</link> *sc);</programlisting>
<para>
Copies a <link linkend="GConfSchema"><type>GConfSchema</type></link>. The copy is a deep copy, that is, any allocated memory
inside the <link linkend="GConfSchema"><type>GConfSchema</type></link> will also be copied.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link> to copy.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a newly allocated <link linkend="GConfSchema"><type>GConfSchema</type></link>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-type" role="function"/>gconf_schema_get_type ()</title>
<indexterm><primary>gconf_schema_get_type</primary></indexterm><programlisting><link linkend="GConfValueType">GConfValueType</link>      gconf_schema_get_type               (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the type of the entry described by a <link linkend="GConfSchema"><type>GConfSchema</type></link>
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the entry type.
<!-- <link linkend="Unused"><type>Unused</type></link> Parameters # -->


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-locale" role="function"/>gconf_schema_get_locale ()</title>
<indexterm><primary>gconf_schema_get_locale</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gconf_schema_get_locale             (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the locale for a <link linkend="GConfSchema"><type>GConfSchema</type></link>. The returned string
is <emphasis>not</emphasis> a copy, so don't try to free it. It is
"owned" by the <link linkend="GConfSchema"><type>GConfSchema</type></link> and will be destroyed when the <link linkend="GConfSchema"><type>GConfSchema</type></link>
is destroyed.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the locale
<!-- # Unused parameters # -->


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-short-desc" role="function"/>gconf_schema_get_short_desc ()</title>
<indexterm><primary>gconf_schema_get_short_desc</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gconf_schema_get_short_desc         (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the short description for a <link linkend="GConfSchema"><type>GConfSchema</type></link>. The returned string
is <emphasis>not</emphasis> a copy, don't try to free it. It is
"owned" by the <link linkend="GConfSchema"><type>GConfSchema</type></link> and will be destroyed when the <link linkend="GConfSchema"><type>GConfSchema</type></link>
is destroyed.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the short description.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-long-desc" role="function"/>gconf_schema_get_long_desc ()</title>
<indexterm><primary>gconf_schema_get_long_desc</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gconf_schema_get_long_desc          (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the long description for a <link linkend="GConfSchema"><type>GConfSchema</type></link>. The returned string
is <emphasis>not</emphasis> a copy, don't try to free it. It is
"owned" by the <link linkend="GConfSchema"><type>GConfSchema</type></link> and will be destroyed when the <link linkend="GConfSchema"><type>GConfSchema</type></link>
is destroyed.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the long description.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-owner" role="function"/>gconf_schema_get_owner ()</title>
<indexterm><primary>gconf_schema_get_owner</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gconf_schema_get_owner              (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the owner of a <link linkend="GConfSchema"><type>GConfSchema</type></link>. The returned string
is <emphasis>not</emphasis> a copy, don't try to free it. It is
"owned" by the <link linkend="GConfSchema"><type>GConfSchema</type></link> and will be destroyed when the <link linkend="GConfSchema"><type>GConfSchema</type></link>
is destroyed.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the owner.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-default-value" role="function"/>gconf_schema_get_default_value ()</title>
<indexterm><primary>gconf_schema_get_default_value</primary></indexterm><programlisting><link linkend="GConfValue">GConfValue</link>*         gconf_schema_get_default_value      (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the default value of the entry that is described by a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the default value of the entry.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-car-type" role="function"/>gconf_schema_get_car_type ()</title>
<indexterm><primary>gconf_schema_get_car_type</primary></indexterm><programlisting><link linkend="GConfValueType">GConfValueType</link>      gconf_schema_get_car_type           (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the default type of the first member of the pair in the entry
(which should be of type <link linkend="GCONF-VALUE-PAIR:CAPS"><literal>GCONF_VALUE_PAIR</literal></link>) described by <parameter>schema</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the type of the first member of the pair element of the entry.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-cdr-type" role="function"/>gconf_schema_get_cdr_type ()</title>
<indexterm><primary>gconf_schema_get_cdr_type</primary></indexterm><programlisting><link linkend="GConfValueType">GConfValueType</link>      gconf_schema_get_cdr_type           (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the default type of the second member of the pair in the entry
(which should be of type <link linkend="GCONF-VALUE-PAIR:CAPS"><literal>GCONF_VALUE_PAIR</literal></link>) described by <parameter>schema</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>the type of the second member of the pair element of the entry.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-get-list-type" role="function"/>gconf_schema_get_list_type ()</title>
<indexterm><primary>gconf_schema_get_list_type</primary></indexterm><programlisting><link linkend="GConfValueType">GConfValueType</link>      gconf_schema_get_list_type          (const <link linkend="GConfSchema">GConfSchema</link> *schema);</programlisting>
<para>
Returns the default type of the list elements of the entry (which should be
of default type <link linkend="GCONF-VALUE-LIST:CAPS"><literal>GCONF_VALUE_LIST</literal></link>) described by <parameter>schema</parameter>.
</para>

+<parameter>schema</parameter>: a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
+<parameter>Returns</parameter>: the type of the list elements of the entry.<variablelist role="params">
<varlistentry><term><parameter>schema</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-type" role="function"/>gconf_schema_set_type ()</title>
<indexterm><primary>gconf_schema_set_type</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_type               (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>
Sets the <link linkend="GConfValueType"><type>GConfValueType</type></link> of the <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>type</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>the type.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-locale" role="function"/>gconf_schema_set_locale ()</title>
<indexterm><primary>gconf_schema_set_locale</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_locale             (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *locale);</programlisting>
<para>
Sets the locale for a <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>locale</parameter>. <parameter>locale</parameter> is copied.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>locale</parameter>&nbsp;:</term>
<listitem><simpara>the locale.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-short-desc" role="function"/>gconf_schema_set_short_desc ()</title>
<indexterm><primary>gconf_schema_set_short_desc</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_short_desc         (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *desc);</programlisting>
<para>
Sets the short description of a <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>desc</parameter>. <parameter>desc</parameter> is copied.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara>the short description.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-long-desc" role="function"/>gconf_schema_set_long_desc ()</title>
<indexterm><primary>gconf_schema_set_long_desc</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_long_desc          (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *desc);</programlisting>
<para>
Sets the long description of a <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>desc</parameter>. <parameter>desc</parameter> is copied.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara>the long description.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-owner" role="function"/>gconf_schema_set_owner ()</title>
<indexterm><primary>gconf_schema_set_owner</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_owner              (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="gchar">gchar</link> *owner);</programlisting>
<para>
Sets the "owner" of the <link linkend="GConfSchema"><type>GConfSchema</type></link>, where the owner is the
name of the application that created the entry.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>owner</parameter>&nbsp;:</term>
<listitem><simpara>the name of the creating application.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-default-value" role="function"/>gconf_schema_set_default_value ()</title>
<indexterm><primary>gconf_schema_set_default_value</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_default_value      (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         const <link linkend="GConfValue">GConfValue</link> *val);</programlisting>
<para>
Sets the default value for the entry described by the <link linkend="GConfSchema"><type>GConfSchema</type></link>.
The <link linkend="GConfValue"><type>GConfValue</type></link> is copied. Alternatively, use
<link linkend="gconf-schema-set-default-value-nocopy"><function>gconf_schema_set_default_value_nocopy()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>the default value.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-default-value-nocopy" role="function"/>gconf_schema_set_default_value_nocopy ()</title>
<indexterm><primary>gconf_schema_set_default_value_nocopy</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_default_value_nocopy
                                                        (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValue">GConfValue</link> *val);</programlisting>
<para>
Sets the default value for the entry described by the <link linkend="GConfSchema"><type>GConfSchema</type></link>.
The <link linkend="GConfValue"><type>GConfValue</type></link> is not copied; the <link linkend="GConfSchema"><type>GConfSchema</type></link> takes ownership of it.
Alternatively, use <link linkend="gconf-schema-set-default-value"><function>gconf_schema_set_default_value()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>the default value.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-car-type" role="function"/>gconf_schema_set_car_type ()</title>
<indexterm><primary>gconf_schema_set_car_type</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_car_type           (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>
Sets the <link linkend="GConfValueType"><type>GConfValueType</type></link> of the first member (car) of the entry (which
should be of type <link linkend="GCONF-VALUE-PAIR:CAPS"><literal>GCONF_VALUE_PAIR</literal></link>) described by <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>type</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>the type.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-cdr-type" role="function"/>gconf_schema_set_cdr_type ()</title>
<indexterm><primary>gconf_schema_set_cdr_type</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_cdr_type           (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>
Sets the <link linkend="GConfValueType"><type>GConfValueType</type></link> of the second member (cdr) of the entry (which
should be of type <link linkend="GCONF-VALUE-PAIR:CAPS"><literal>GCONF_VALUE_PAIR</literal></link>) described by <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>type</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>the type.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gconf-schema-set-list-type" role="function"/>gconf_schema_set_list_type ()</title>
<indexterm><primary>gconf_schema_set_list_type</primary></indexterm><programlisting><link linkend="void">void</link>                gconf_schema_set_list_type          (<link linkend="GConfSchema">GConfSchema</link> *sc,
                                                         <link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>
Sets the <link linkend="GConfValueType"><type>GConfValueType</type></link> of the list elements of the entry (which
should be of type <link linkend="GCONF-VALUE-LIST:CAPS"><literal>GCONF_VALUE_LIST</literal></link>) described by <link linkend="GConfSchema"><type>GConfSchema</type></link> to <parameter>type</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GConfSchema"><type>GConfSchema</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>the type.


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
